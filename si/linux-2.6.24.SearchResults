---- modules Matches (104 in 58 files) ----
Aio.h (include\linux): * for now it's unused and we probably don't want modules to even
Apm_32.c (arch\x86\kernel): * (We allow underscores for compatibility with the modules code)
Asm-offsets_32.c (arch\x86\kernel): * Generate definitions needed by assembly language modules.
Asm-offsets_64.c (arch\x86\kernel): * Generate definitions needed by assembly language modules.
Audit.h (include\linux):#define AUDIT_KERNEL_OTHER	1316	/* For use by 3rd party modules */
Capability.h (include\linux):/* Insert and remove kernel modules - modify kernel without limit */
Cfag12864b.h (include\linux): * Useful for buffer read-only modules.
Char_dev.c (fs):/* Let modules do char dev stuff */
Cs46xx_dsp_spos.h (include\sound):	struct dsp_module_desc * modules; /* modules loaded into SP */
Device.h (include\linux):	const char 		* mod_name;	/* used for built-in modules */
Ebtables.h (include\linux\netfilter_bridge):/* ebtables target modules store the verdict inside an int. We can
Elf-em.h (include\linux):				   modules of these types will be rejected by
Elfnote.h (include\linux): * modules?) for use by external programs.
Fault_64.c (arch\x86\mm):	/* Check that there is no need to do the same for the modules area. */
Fs.h (include\linux):/* These macros are for out of kernel modules to test that
Gadget.h (include\linux\usb):/* driver modules register and unregister, as usual.
Gss_api.h (include\linux\sunrpc): * mechanisms may be dynamically registered or unregistered by modules. */
H3600.h (include\asm-arm\arch-sa1100):	int	      (*pm_callback_aux)(int req);  /* Secondary callback (used by HAL modules) */
Hwmon.h (include\linux):    hwmon.h - part of lm_sensors, Linux kernel modules for hardware monitoring
I2o.h (include\linux): * the I2O kernel modules.
If.h (include\linux): *	beautiful scheme using only loadable modules with arguments
Init.h (include\linux):   discard it in modules) */
Init.h (include\linux): * This only exists for built-in code, not for modules.
Init.h (include\linux):/* Don't use these in modules, but some people do... */
Initval.h (include\sound): *  Init values for soundcard modules
Io_apic_32.c (arch\x86\kernel): * Not an __init, possibly needed by modules
Io_apic_64.c (arch\x86\kernel): * Not an __init, possibly needed by modules
Ip.h (include\linux):#define	IPOPT_TS_PRESPEC	3		/* specified modules only */
Ipmi_smi.h (include\linux):	   message handler get the modules that this handler belongs
Ipmi_smi.h (include\linux):	   to; this function lets the SMI claim any modules that it
Ir-common.h (include\media):/* Keymaps to be used by other modules */
Iw_handler.h (include\net):/* Second : functions that may be called by driver modules */
Ixjuser.h (include\linux):*           must be rebuilt if you change this value, also all modules you
Kprobes.c (kernel):		 * We must allow modules to probe themself and in this case
Kprobes.c (kernel):		 * unloading of self probing modules.
Loop.h (include\linux):/* Support for loadable transfer modules */
Marker.c (kernel):	/* Markers in modules. */
Module.c (kernel):/* List of modules, protected by module_mutex or preempt_disable
Module.c (kernel):static LIST_HEAD(modules);
Module.c (kernel):	/* Now try modules. */
Module.c (kernel):	list_for_each_entry(mod, &modules, list) {
Module.c (kernel):	list_for_each_entry(mod, &modules, list) {
Module.c (kernel):		printk(KERN_ERR "No per-cpu room for modules.\n");
Module.c (kernel):/* modules using other modules */
Module.c (kernel):	list_for_each_entry(i, &modules, list) {
Module.c (kernel):		/* Other modules depend on us: get rid of them first. */
Module.c (kernel):	/* We don't know the usage count, or what modules are using. */
Module.c (kernel):	list_add(&mod->list, &modules);
Module.c (kernel):	list_for_each_entry(mod, &modules, list) {
Module.c (kernel):	list_for_each_entry(mod, &modules, list) {
Module.c (kernel):	list_for_each_entry(mod, &modules, list) {
Module.c (kernel):	list_for_each_entry(mod, &modules, list) {
Module.c (kernel):		list_for_each_entry(mod, &modules, list)
Module.c (kernel):/* Called by the /proc file system to return a list of modules. */
Module.c (kernel):	return seq_list_start(&modules, *pos);
Module.c (kernel):	return seq_list_next(p, &modules, pos);
Module.c (kernel):		 * apply to modules.
Module.c (kernel):	list_for_each_entry(mod, &modules, list) {
Module.c (kernel):	list_for_each_entry(mod, &modules, list) {
Module.c (kernel):	list_for_each_entry(mod, &modules, list)
Module.c (kernel):	list_for_each_entry(mod, &modules, list)
Module.c (kernel):		/* Lookup built-in module entry in /sys/modules */
Module.c (kernel):	list_for_each_entry(mod, &modules, list)
Module.h (include\linux): * Dynamic loading of modules into the kernel.
Module.h (include\linux): * software modules
Module.h (include\linux): * 2.	So the community can ignore bug reports including proprietary modules
Module.h (include\linux):	/* Member of list of modules */
Module.h (include\linux):	/* What modules depend on me? */
Module.h (include\linux):/* FIXME: It'd be nice to isolate modules during init, too, so they
Module.h (include\linux):/* For extable.c to search modules' exception tables. */
Moduleloader.h (include\linux):/* The stuff needed for archs to support modules. */
Mod_devicetable.h (include\linux): * User mode code can read these tables to choose which modules to load.
Mx31.h (include\asm-arm\arch-mxc): * peripheral modules. It is used by passing in the physical address as x
Netlabel.h (include\net): * The following functions are provided for use by other kernel modules,
Netlabel.h (include\net): * specifically kernel LSM modules, to provide a consistent, transparent API
Nf_conntrack.h (include\net\netfilter):	/* Storage reserved for other modules: */
Notifier.h (include\linux): *	that modules can poke their nose into the innards. The network devices
Params.c (kernel):/* sysfs output in /sys/modules/XYZ/parameters/ */
Params.c (kernel): * @name_skip: offset where the parameter name start in kparam[].name. Needed for built-in "modules"
Params.c (kernel): * param_sysfs_builtin - add contents in /sys/parameters for built-in modules
Params.c (kernel): * Add module_parameters to sysfs for "modules" built into the kernel.
Percpu.h (include\linux):/* Enough to cover all DEFINE_PER_CPUs in kernel, including modules. */
Platform.h (include\asm-arm\arch-integrator): *  Logic expansion modules
Platform.h (include\asm-arm\arch-realview): *  Logic expansion modules
Platform.h (include\asm-arm\arch-realview):#define REALVIEW_DECODE_OFFSET		0xC	/* Fitted logic modules */
Platform.h (include\asm-arm\arch-versatile): *  Logic expansion modules
Platform.h (include\asm-arm\arch-versatile):#define VERSATILE_DECODE_OFFSET		0xC	/* Fitted logic modules */
Ppp-comp.h (include\linux):	/* Used in locking compressor modules */
Ptrace.c (kernel):	/* Don't let security modules deny introspection */
Pwc-ioctl.h (include\media):/* Flags for PWCX subroutines. Not all modules honour all flags. */
Route.h (include\net): * some modules referring to it. */
Security.h (include\linux): *	Security modules must handle this separately if they need such
Security.h (include\linux): *	This hook allows security modules to control the ability of a process
Security.h (include\linux): *	Security modules may also want to perform a process tracing check
Smpboot_64.c (arch\x86\kernel): * are allocated by some modules at init time, and dont expect to
Sock.h (include\net):  *	@sk_security: used by security modules
Som.h (include\linux):	unsigned int	compiler_total;		/* number of modules */
Textsearch.h (include\linux): * TS_AUTOLOAD - Automatically load textsearch modules when needed
Usb.h (include\linux): * in host controller driver modules, does not change these path identifers;
Vermagic.h (include\linux):/* Simply sanity version stamp for modules. */
Voyager.h (include\asm-x86):/* Total number of possible modules (including submodules) */
Voyager.h (include\asm-x86):/* the two memory modules corresponding to memory cards in the system */
Voyager.h (include\asm-x86):/* functions exported by the voyager and voyager_smp modules */
